[{"body":"Idk this is random stuff I write.\n ","link":"https://yeti-is-god.ml/posts/","title":"Posts"},{"body":" Introduction First of all, the major wrapper library, which was called discord.py, for developing discord bots in python is currently being discontinued. You can see a full depth in-detail description by the project author in this gist linked below. Sadly though, yea.\nBut, continued and maintained forks of the library are available.\nHonest opinon: almost every fork is shit\nWhy does Danny(Rapptz) no longer maintains discord.py [gist]\nThe last discord.py update is 2.0 alpha which is not released on PyPi but lives on the master branch of the repo. This last release contains buttons and context menus but doesn\u0026rsquo;t include slash commands. You can either implement them yourself, or, you can always switch to a maintained fork.\nSome Discord.py Forks  PyCord Nextcord Disnake  (These are not classified or whatever, use whatever fork you decide)\nSince it\u0026rsquo;s a fork üç¥ every fork follows almost the same syntax. I\u0026rsquo;ll be using discord.py 2.0a in this post.\r\rPrerequisites  A Bot application Python Intermediate python knowledge (OOP, classes, inheritance, reading \u0026amp; understanding errors, overall atleast basic python knowledge)  Learn python Since discord.py is a somewhat advanced library, it is highly recommended you know atleast basic python knowledge at minimum. Don\u0026rsquo;t start off with creating a Discord bot as you\u0026rsquo;re gonna get so confused and stuck as you go through. Make sure you\u0026rsquo;re ready to go :D\r\rInstallation pip install -U discord.py #The latest PyPi release pip install -U git+https://github.com/Rapptz/discord.py #To install from the master branch(2.0a) # Or, if you\u0026#39;re using a fork see their docs on how to install. Creating a Bot. You have to start off by creating a Bot application in the official Discord Developer Portal\nIf you need guidance you can read how here.\nGrab the token, and store it somewhere. You can use .env files in your project if you\u0026rsquo;d like so your token is more secure.\nMake sure you do not leak or send your bot\u0026rsquo;s token anywhere, anybody can have access to your bot through your token. In case you however did get it leaked, you can always regenerate it in the dev portal page.\r\rWriting the code Client The minimal example to fire up your bot is by using discord.Client\nimport discord client = discord.Client() @client.event async def on_message(message: discord.Message): if message.author.bot: return await message.channel.send(f\u0026#34;{message.author} said {message.content}!\u0026#34;) client.run(YOUR_TOKEN) You will understand why and how this works later on.\nAlthough, since we\u0026rsquo;re creating an actual bot with commands and stuff with it, we can use a more useful implementation\next.commands Introducing, the commands framework. Discord.py offers you with a fully featured commands framework for creating commands for your bot. With a bunch of other tools you can use along with it.\nIt\u0026rsquo;s better to use ext.commands since your life becomes so much easier that way.. and many other reasons.\ncommands.Bot is a subclass of Client, meaning you can do everything discord.Client has plus more functionality for creating commands etc.\nHere\u0026rsquo;s a minimal example of how you can create a bot with the commands framework that would have a command named hello:\nimport discord from discord.ext import commands bot = commands.Bot(command_prefix=\u0026#34;!\u0026#34;) @bot.command() async def hello(ctx: commands.Context): await ctx.send(\u0026#34;Hey there {}\u0026#34;.format(ctx.author.mention)) bot.run(YOUR_TOKEN) And as simple as that, you have a bot that has a command.\nHere\u0026rsquo;s how it looks like when you invoke it:\nWhy should you use ext.commands?  Prevents spaghetti code Better performance Easy handling and processing of command arguments Argument type converters Easy sub commands Command cooldowns Built-in help function Easy prefix management Command checks, for controlling when they\u0026rsquo;re to be invoked Ability to add command modules via extensions/cogs Still able to do everything you can do with Client  (Copied from the offical dpy server)\n‚Ä£ Events vs Commands Discord.py introduces you to a system of \u0026ldquo;Events\u0026rdquo; and \u0026ldquo;Commands\u0026rdquo;.\nThrough events, you can listen to stuff from the API. Yes, this is through Discord\u0026rsquo;s websocket, whereas commands are.. commands.\nHere\u0026rsquo;s an event that logs all the messages your bot recieves in the terminal:\n... @bot.event async def on_message(message: discord.Message): print( f\u0026#34;{message.author} said: {message.content} at {message.created_at}\u0026#34; ) ... Event reference\nA command is just, a command like normally bots have in discord.\nWhen you construct your commands.Bot instance, you must pass a command_prefix parameter. This is your command prefix, meaning you invoke every command by writing that as it\u0026rsquo;s prefix.\n !hello, !help, .help, ?hi  The command prefix can be anything you want.\n‚Ä£ Commands Let\u0026rsquo;s see how the commands framework works\nYou can create a command using the bot.command() decorator. The arguments you pass in the function would be the actual arguments you pass when invoking the command.\nctx or otherwise known as Context is a required argument. This argument contains data about the current context of the command.\nFor instance, data such as:\n Who invoked the command What channel was it invoked in What is life and etc  @bot.command(name=\u0026#34;optionally_specify_name_here\u0026#34;, aliases=[\u0026#39;list\u0026#39;, \u0026#39;of\u0026#39;, \u0026#39;aliases\u0026#39;]) async def command_name(ctx, argument): await ctx.send(argument) And like that.\nctx is a subclass of discord.abc.Messageable and therefore, you can send the message to the current destination using ctx.send()\nTypehints Oh, another cool feature in discord.py is that typehints actually do something. In normal python, typehints do nothing that affects our code. In discord.py however, it attempts to convert your typehints to the releveant objects you typehint to it.\nasync def hey(ctx, member: discord.Member): # member is now a discord.Member object await ctx.send(f\u0026#34;Hey {member.mention}\u0026#34;) The command invoker should invoke the command by providing a valid ID, mention, name or nickname. If it fails to convert the provided argument to a member object, it raises an MemberNotFound which you can handle in your error handler\nHow does this work? Your typehints gets passed through special converters which you can also call manually.\nThe above example uses MemberConverter\nHere are some of the converters:\n  UserConverter\n  MessageConverter\n  TextChannelConverter\n  RoleConverter\n  You can see in-depth description about all the converters here: https://discordpy.readthedocs.io/en/latest/ext/commands/commands.html#converters\nOh, and it also works for basic data types such as int and str!\nThis is really handy ;)\n\rYou can easily create commands like this. Here\u0026rsquo;s a simple userinfo command I created with discord.Member and with a custom Embed\n... @bot.command(aliases=[\u0026#34;ui\u0026#34;, \u0026#34;whois\u0026#34;]) async def userinfo(ctx, member: discord.Member=None): if not member: member = ctx.author embed = discord.Embed( title = \u0026#34;User Info\u0026#34;, description = f\u0026#34;Information about {member}\u0026#34;, color = ctx.author.color, timestamp = ctx.message.created_at ) embed.set_thumbnail(url=member.avatar.url) embed.add_field(name=\u0026#34;Account creation:\u0026#34;, value=f\u0026#34;\u0026lt;t:{int(member.created_at.timestamp())}:R\u0026gt;\u0026#34;) embed.add_field(name=\u0026#34;Joined Server at\u0026#34;, value=f\u0026#34;\u0026lt;t:{int(member.joined_at.timestamp())}:R\u0026gt;\u0026#34;) embed.add_field(name=\u0026#34;Roles:\u0026#34; value=\u0026#34;, \u0026#34;.join([role.mention for role in member.roles])) await ctx.send(embed=embed) ... Here\u0026rsquo;s the result:\n‚Ä£ Cogs Cogs are an easy and efficient way to maintain your code in different files as different categories. Using cogs, you can setup different areas in your bot such as Moderation, Admin, Fun, Economy or anything you like.\nThe default help command in discord.py also implements your cogs as different categories. (You will learn more below)\nHere\u0026rsquo;s how you create a cog:\nTo make it neat, I\u0026rsquo;ll put my cogs in a new directory called cogs.\ncogs/fun.py\nimport discord from discord.ext import commands import random class Fun(commands.Cog): def __init__(self, bot: commands.Bot): self.bot = bot # In cogs, you implement commands and cogs # using the commands module itself, and not  # using your bot instance. # For events -\u0026gt; @commands.Cog.listener() # For commands -\u0026gt; @commands.command() # I\u0026#39;ll create an event and a command just to show you. @commands.Cog.listener() async def on_member_join(self, member: discord.Member): # Typehinting is also not neccessary in events nor # commands(unless you want to convert), # I\u0026#39;m just typehinting just to showcase # what the object is if member.bot: # We don\u0026#39;t want the bot greeting other bots return await member.send(f\u0026#34;Hello there {member.mention}!\\nWelcome to {member.guild.name}\u0026#34;) # This would send a direct message to the newly # joined member @commands.command(aliases=[\u0026#34;pp\u0026#34;]) async def penis(self, ctx, member: discord.Member=None): \u0026#34;\u0026#34;\u0026#34;Generates the user\u0026#39;s pp size, if no member is specified, defaults the command author\u0026#34;\u0026#34;\u0026#34; if not member: member = ctx.author # Or, you can just do member = member or ctx.author pp_size = random.randint(1, 20)*\u0026#39;=\u0026#39; # would give us something like \u0026#39;======\u0026#39; await ctx.send( f\u0026#34;{member.mention} your pp is: {\u0026#39;B{pp_size}D\u0026#39;}\u0026#34;) # Would give us something like: # B===========D # Now, you need to have a setup function at the end of the cog. # This is required to load the actual cog def setup(bot): bot.add_cog(Fun(bot)) # And you\u0026#39;re done with the cog. Now you have to load the cog in the bot. To do this, you can call bot.load_extension and pass the location of the cog.\nCogs are treated as modules, so you have to pass the cog like how you would import a module in python. Since, our cog is in a folder called cogs, the location of the cog would be cogs.cog_name. And in our case, cogs.fun\nbot.py\n... bot.load_extension(\u0026#34;cogs.fun\u0026#34;) # When you develop more, you will have to create more and more cogs. # Since, manually loading each cog is boring, we can loop through  # all the files in the \u0026#39;cogs\u0026#39; folder and load them automatically import os for filename in os.listdir(\u0026#34;./cogs\u0026#34;): # The filename would be file.py # We don\u0026#39;t need the .py part # And also we don\u0026#39;t need to include non-python files if filename.endswith(\u0026#34;.py\u0026#34;): bot.load_extension(f\u0026#34;cogs.{filename[:-3]}\u0026#34;) # Slice 3 charcaters from the end \u0026#39;.py\u0026#39; # Done! ... ‚Ä£ Subclassed Bot You can subclass commands.Bot and create your own version of commands.Bot with extra methods, properties, well, whatever you want.\nclass CoolBot(commands.Bot): def __init__(self): super().__init__( command_prefix=\u0026#34;?\u0026#34;, case_insensitive=True, owner_ids={652407551849267200, 719797637435621395}, strip_after_prefix=True, intents=discord.Intents.all() ) self.haha_funny_number = 69 def cool_method(self): return \u0026#34;Pretty cool üòé\u0026#34; # You can now: bot = CoolBot() bot.run(TOKEN) ‚Ä£ Custom Context ctx or Context, is really useful since it provides you with the current invocation data. You can also create your own context. For instance, if you want a method that you use frequently in your commands to be accessed via ctx, you can make that happen.\nThis is pretty handy.\nclass YourCustomContext(commands.Context): @property def woo_secret(self): return 35+34 async def react(self, emoji=\u0026#34;‚ú®\u0026#34;): # Give emoji a default argument await self.message.add_reaction(emoji) # You need to hook our custom context into our # bot. This is how: class MyBot(commands.Bot): async def get_context(self, message, *, cls=None): return await super().get_context(message, cls=cls or YourCustomContext) # And now, you can use that anywhere you have access to ctx @bot.command() async def _react(ctx): await ctx.react(\u0026#34;üéà\u0026#34;) await ctx.send(ctx.woo_secret) ‚Ä£ A custom Help Command You can subclass commands.HelpCommand and create your own custom version of your bot\u0026rsquo;s help.\n ext.commands.HelpCommand\n This is the base of creating your HelpCommand. You can implement your own custom version from scratch here.\n  ‚Äé\n ext.commands.DefaultHelpCommand\n The default HelpCommand implementation represents this class. It also inherits from HelpCommand. This is what the default help command looks like:   ‚Äé\n ext.commands.MinimalHelpCommand\n This is an implementation of a minimial help command as the name suggests. You can start off with this class, by default the minimal help command looks like this: It looks nicer   You can easily make use of the MinimalHelp class and make it an embed if you want.\nclass EmbeddedHelp(commands.MinimalHelpCommand): async def send_pages(self): destination = self.get_destination() for page in self.paginator.pages: embed = discord.Embed(description=page, color=discord.Color.pink()) await destination.send(embed=embed) bot = commands.Bot(command_prefix=\u0026#34;!\u0026#34;, help_command=EmbeddedHelp()) And you will get something like:\nHere\u0026rsquo;s a really cool resource for you to learn about subclassing Help\nWalkthrough Guide of Subclassing Help Command\nResources for you   Discord.py Documentation\n  A good tutorial\n  A guide to learn discord.py\n  ","link":"https://yeti-is-god.ml/posts/getting-started-on-a-discord-bot/","title":"Getting Started on a Discord Bot"},{"body":"Hello. \nHeyo, I\u0026rsquo;m Yeti and I\u0026rsquo;m a tryna be developer that loves creating.. stuff? I have no idea what you\u0026rsquo;re doing here but anyways send hugs Omegalul\nAverage(less than) in Python and I\u0026rsquo;m currently tryna learn C#\nI code as a hobby in my free time and I\u0026rsquo;m decently bad at it.\nHere are a few facts about me:\n I hate myself I hate myself I really love hugs I hate myself  You can check out my project(s) in the projects section on the left or you can just click right through:\nGo to Projects  Also, check out my posts if any is written there idk i hate my life cring\nOh and add Yeti#4594 on discord! :)\n","link":"https://yeti-is-god.ml/","title":"Home"},{"body":"   KitsuPy Redirect   Redirecting.....\n ","link":"https://yeti-is-god.ml/kitsupy/","title":""},{"body":"Discord Hello world!\n Fuck you\n hey\n","link":"https://yeti-is-god.ml/school/","title":""},{"body":"\r\r\rhttps://yeti.ga/docs/spotilike_/spotilike\r\r\rRedirecting.....\n\r","link":"https://yeti-is-god.ml/spotilike/","title":""},{"body":" What is openDNS? In case you didn\u0026rsquo;t know, OpenDNS is a service that offers you a custom DNS service to block unwanted connections from your network.\n OpenDNS is an American company providing Domain Name System (DNS) resolution services‚Äîwith features such as phishing protection, optional content filtering, and DNS lookup in its DNS servers‚Äîand a cloud computing security product suite, Umbrella, designed to protect enterprise customers from malware, botnets, phishing, and targeted online attacks. The OpenDNS Global Network processes an estimated 100 billion DNS queries daily from 85 million users through 25 data centers worldwide. -Wikipedia\n You can use OpenDNS to disable access to certain networks. Such as websites or categories of websites, well, let\u0026rsquo;s call it content filtering.\nOpenDNS is also known to have zero downtime because of the global network of DNS servers it covers.\nHow does this work? The websites you visit thoughout the day are actually IP addresses behind the scenes. Domain names such as www.youtube.com point to an IP address which you will access as a simple name that\u0026rsquo;s easy to remember. To eliminate the need of remembering IP addresses, DNS servers are useful.\nEvery device in the interent has an IP address. This is like their identity in a computer-friendly way. Your client performs a request to a DNS server to return the IP address of where you want to go according to the domain you entered. If the DNS server finds the record, it returns the specific IP address for you to access where you want to go.\nThis is basically how it works.\nWhy would you want to use it? Speed, reliability and much.\nIf you want to block people from visiting certain sites and/or categories, you can easily set it up on your router and have complete control over your network in a really simple way.\nThis could be really useful if you have kids- but that\u0026rsquo;s not the point here huh\u0026hellip; to block it\nSo, why block it and how? As amazing as this is, this might not be as cool for everyone. I don\u0026rsquo;t recommend attempting to bypass this if it\u0026rsquo;s blocked for a reason\u0026hellip; But anyways:\n Just change DNS.\n That\u0026rsquo;s all you have to do, although there are other methods.\nI recommend using Google\u0026rsquo;s Public DNS which is,\n8.8.8.8\r8.8.4.4 Assuming you probably don\u0026rsquo;t have access to your router, change it in your machine itself.\n Switch to a public DNS Use a VPN Use a Proxy site Use a browser like Tor   1. Switch to a different DNS ‚Ä£ Windows This method is how I recommend it, plus it\u0026rsquo;s reliable.\nIf you are on a Windows PC, follow these steps:\n  Open Control Panel\n navigate to Control Panel\\Network and Internet\\Network and Sharing Center and click on Change Adapter settings.      Right click your network, and go to properties.\n  Select ‚ÄúInternet Protocol Version 4 (TCIP/IPv4)‚Äù in the list and click ‚ÄúProperties‚Äù.\n  Check \u0026ldquo;Use the following DNS server addresses, enter the addresses of the DNS servers you want to use\u0026rdquo;.\n   Enter the addresses of the DNS servers you want to use and click Ok.  You may also want to clear the DNS cache. For this: open a command prompt window as Adminstrator and run: \ripconfig /flushdns\r\rAnd, that\u0026rsquo;s it! You\u0026rsquo;re now free from OpenDNS.\n‚Ä£ Android  Head over to your WiFi settings and tap \u0026ldquo;Modify network\u0026rdquo; or the closest match to that.  There you can change your DNS.\nA good resource: https://www.howtogeek.com/167533/the-ultimate-guide-to-changing-your-dns-server/\n„Ö§\n2. Use a VPN You can use a VPN alternatively. A VPN stands for \u0026ldquo;Virtual Private Network\u0026rdquo; which disguises your IP through a data tunnel which comes out from various servers from around the world.\nMost of the times a VPN would assign a separate DNS server throughout your session, just make sure your choice of VPN does.\nIf you care about privacy alot, I suggest you use a VPN since it\u0026rsquo;s safe that way to surf the interent without being tracked in any way.\n„Ö§\n3. Use a Proxy site I don\u0026rsquo;t recommend this one. A proxy site is like a website that allows you to access blocked websites.\nWhat it essentially does is, it requests for the address you asked for in a proxy tunnel and receives back the data through that same tunnel. Hence, it\u0026rsquo;s not blocked anymore.\nYou can Learn more here\nHowever, there are limitations to this method. OpenDNS blocks almost all of these sites by default. This is also less secure since it can track your history.\nHere are a list of some proxy sites:\n https://hidemyass.com https://proxysite.com https://Kproxy.com https://hola.org  „Ö§\n4. Use a portable browser You can also use a super secure browser alternatively. The most popular out there is the Tor browser.\nTor browser\u0026rsquo;s main point is privacy. It is designed to prevent 3rd party trackers from tracking your online activity. You can read more on their official website:\nwww.torproject.org\n(You can install this browser into a flash drive and use it acccordingly)\n Thanks for reading! That\u0026rsquo;s the end and you made it to the end, thank you for reading!\n","link":"https://yeti-is-god.ml/posts/how-to-bypass-opendns/","title":"How to bypass OpenDNS security?"},{"body":"Welcome to the Kitsupy Documentation!\nThis documentation contains includes 4 main sections:\n General  Installation Simple usage example   KitsuClient  KitsuClient get_anime get_character get_episode get_manga trending_anime   Pagination  limits \u0026amp; offset next method   Object reference  Anime Manga Character Titles Images    General Kitsupy is a simple asynchronous wrapper around https://kitsu.io JSON:API.\nThis library uses aiohttp for the requests.\nInstallation You can install through github:\npip install git+https://github.com/yeti2006/kitsupy Simple usage example import asyncio, kitsu client = kitsu.KitsuClient() # Instantiate client; # you can optionally pass your own aiohttp client session async def main(): anime = await client.get_anime(query=\u0026#34;Kimi no na wa\u0026#34;, limit=1) # Returns an kitsu.Anime object which happens to be the first # result provided by the API as limit=1 print(anime.id) # the API based ID of the anime print(anime.title.en) # str, the english title of the anime print(anime.created_at) # a datetime.datetime object of the creation date of the anime print(anime.nsfw) # bool anime_characters = await anime.characters() # Returns a list of kitsu.Character objects for character in anime_characters: print(character.name) print(character.description) # Get the 10 most trending animes from the API trending_anime = await client.trending_anime(limit=10) for anime in trending_anime: streaming_links = await anime.streaming_links() for streaming_link in streaming_links: print(streaming_link.url) # Prints a streaming link to the anime # Search for a manga in API manga = await client.get_manga(query=\u0026#34;One Piece\u0026#34;, limit=1) print(manga.user_count) await client.close() # Close our client session asyncio.get_event_loop().run_until_complete(main()) KitsuClient This is the main class you need to use. You can optionally pass an aiohttp ClientSession if you have one, if not, it would automatically create one for itself.\nkitsu.KitsuClient kitsu.KitsuClient(session: Optional[aiohttp.ClientSession] = None) The client object of the library.\nParameters:\n session: Optional | aiohttp.ClientSession  kitsu.KitsuClient.get_anime await kitsu.KitsuClient.get_anime( *, query: Union[int, str], limit: int = 10, offset: int = 0, custom_params: dict = None ) -\u0026gt; Anime Parameters:\n query: Required | The string to search for or an API based ID to fetch the object directly limit: Optional | The number of API results to return (maximum is 20) offset: Optional | The number of \u0026lsquo;pages\u0026rsquo; for the API to return based on the limit custom_params: Optional | A dictionary of custom parameters to pass in the API call  Returns:\n kitsu.Anime | A list of objects or one depending on the number of results  kitsu.KitsuClient.get_character await kitsu.KitsuClient.get_character( *, query; Union[str, int], anime: bool = False, manga: bool = False, limit: int = 10, offset: int = 0, custom_params: dict = None ) -\u0026gt; Character Parameters:\n query: Required | The string to search for or an API based ID to fetch the object directly anime: Optional | whether the query is an anime character manga: Optional | whether the query is a manga character limit: Optional | The number of API results to return (maximum is 20) offset: Optional | The number of \u0026lsquo;pages\u0026rsquo; for the API to return based on the limit custom_params: Optional | A dictionary of custom parameters to pass in the API call  Returns:\n kitsu.Character | A list of objects or one depending on the number of results  kitsu.KitsuClient.get_episode await kitsu.KitsuClient.get_episode( *, query; Union[str, int], limit: int = 10, offset: int = 0, custom_params: dict = None ) -\u0026gt; AnimeEpisode Parameters:\n query: Required | The string to search for or an API based ID to fetch the object directly limit: Optional | The number of API results to return (maximum is 20) offset: Optional | The number of \u0026lsquo;pages\u0026rsquo; for the API to return based on the limit custom_params: Optional | A dictionary of custom parameters to pass in the API call  Returns:\n kitsu.AnimeEpisode | A list of objects or one depending on the number of results  kitsu.KitsuClient.get_manga await kitsu.KitsuClient.get_manga( *, query; Union[str, int], limit: int = 10, offset: int = 0, custom_params: dict = None ) -\u0026gt; Manga Parameters:\n query: Required | The string to search for or an API based ID to fetch the object directly limit: Optional | The number of API results to return (maximum is 20) offset: Optional | The number of \u0026lsquo;pages\u0026rsquo; for the API to return based on the limit custom_params: Optional | A dictionary of custom parameters to pass in the API call  Returns:\n kitsu.Manga | A list of objects or one depending on the number of results  kitus.KitsuClient.trending_anime await kitsu.KitsuClient.trending_anime( *, limit: int = 10, offset: int = 0, custom_params: dict = None ) -\u0026gt; Anime Parameters:\n limit: Optional | The number of API results to return (maximum is 20) offset: Optional | The number of \u0026lsquo;pages\u0026rsquo; for the API to return based on the limit custom_params: Optional | A dictionary of custom parameters to pass in the API call  Returns:\n kitsu.Anime | A list of objects or one depending on the number of results  Pagination The API returns results paginated based on the limit and offset values provided.\nLimits \u0026amp; Offset The maximum number of results that is provided by the API is 20 results per request. You can optionally specify this limit to an amount lower or equivalent to 20 using the limit parameter. To get more results, the offset parameter comes handy.\nThe offset parameter would ask the API to return \u0026lsquo;pages\u0026rsquo; of values for the number of results you have specified in limit. Meaning, if you set the limit to 2 and also the offset to 2, the API would return 2 pages containing 2 results in each page, totaling to 4 results altogether.\nLet\u0026rsquo;s see how this works in code:\n... animes = await client.get_anime(query=\u0026#34;kimi no na wa\u0026#34;, limit=2, offset=2) returns: [kitsu.Anime, kitus.Anime] ... As you can see this returns a list of 2 Anime objects. You can get the next anime objects in the 2nd page through the KitsuClient.next method\nnext method await kitsu.KitsuClient.next( _object, *args, **kwargs ) -\u0026gt; Anime | Manga | AnimeEpisode | Character Parameters:\n _object: The Anime, Manga, AnimeEpisode or Character object of the page to get the next objects from *args, **kwargs: Optional parameters to send to the API request  Returns:\n A list of objects or one depending on the number of results.  Object Reference kitsu.Anime The Anime object.\nAttributes:\n  .id\n type: int description: The API based ID of the object.    .type\n type: str description: The type of the object: \u0026ldquo;anime\u0026rdquo;.    .created_at\n type: datetime.datetime description: The creation date of the anime.    .updated_at\n type: datetime.datetime description: The updated date of the anime.    .slug:\n type: str description: The slug of the anime.    .synopsis\n type: str description: The synopsis of the anime.    .title\n type: [kitsu.Titles] description: A \u0026lsquo;Titles\u0026rsquo; namedtuple object that includes the following attributes:    .average_rating\n type: str description: The average rating of the anime    .rating_frequencies\n type: dict description: The rating frequencies of the anime.    .user_count\n type: int description: The number of users of the anime.    .favorites_count\n type: int description: The number of users who have favorited the anime.    .start_date\n type: datetime.datetime description: The start date of the anime.    .end_date\n type: datetime.datetime description: The end date of the anime.    .popularity_rank\n type: int description: The rank number of the anime according to popularity.    .rating_rank\n type: int description: The rank number of the anime according to it\u0026rsquo;s rating.    .age_rating\n type: str description: The age rating string of the anime. This can be one of the following:  G - General Audiences PG - Parental Guidance Suggested R - Restricted R18 - Explict      .age_rating_guide\n type: str description: The guide of the age rating.    .subtype\n type: str description: The subtype of the anime.    .status\n type: str description: The status of the anime.    .tba\n type: str description: The tba of the anime.    .images\n type: kitsu.Images description: An Images object containing the poster image and cover image data.    .episode_count\n type: int description: The number of episodes of the anime.    .episode_length\n type: int description: The altogether length of the episodes of the anime.    .youtube_id\n type: str description: A YouTube video ID that points to a trailer of the anime.    .youtube_url\n type: str description: A full YouTube URL to a trailer of the anime if there\u0026rsquo;s a youtube ID available.    .nsfw\n type: bool description: Returns True if the anime is nsfw rated or False if not.    ._original_genres\n type: list description: A list of dictionaries containing the original genre data from the API. This data includes:  id name description slug      .genres\n type: list description: A list of genre names of the anime.    Methods :\n  await kitsu.Anime.episodes(limit: int = 1)\n  Parameters:\n limit:  type: int description: The limit of results to get.      Returns:\n kitsu.AnimeEpisode | A list of objects or one depending on the number of results.      await kitsu.Anime.streaming_links()\n Returns:  kitsu.StreamingLinks | A list of objects or one depending on the number of results.      await kitsu.Anime.characters()\n Returns:  kitus.Character | A list of objects or one depending on the number of results.      await kitsu.Anime.anime_characters()\n Returns:  kitus.Character | A list of objects or one depending on the number of results.      Other documentation coming soon.\n","link":"https://yeti-is-god.ml/docs/kitsupy/kitsupy/","title":"Kitsupy"},{"body":"Welcome to my projects! As free time is a resource I lack I can\u0026rsquo;t keep up. There are only a few projects, I hope you like them!Leave a star on the repo if you like it.\n(Yes, refactoring is required)\nCheck out SpotiLike\n","link":"https://yeti-is-god.ml/docs/","title":"Projects"},{"body":"Welcome to SpotiLike My favourite project of em all.\nIf you\u0026rsquo;re looking for my first attempt in this project(the one which requires config file typing), I suggest you head over to Version 1\nDownload SpotiLike Source Repo YouTube video \r\rWhat is SpotiLike? SpotiLike is a simple application that allows you to configure custom keyboard shortcuts(hotkeys), that\u0026rsquo;s gonna let you add songs to your private playlists, or your own personal liked songs library in Spotify, while you\u0026rsquo;re listening to them.\nDoesn\u0026rsquo;t make sense?\nOk, imagine you\u0026rsquo;re gaming whilst listening to Spotify, then a track that\u0026rsquo;s of your deep interest comes to view. You may want to save that track to a custom playlist or just like it -\u0026gt; to add to your Liked Songs library. Returning to the Spotify application could be troublesome and annoying.\nTo overcome this, this application might be your aid; you can save them with your keyboard!\nBut\u0026hellip;why? I created this project cause' I needed a way to save my songs as a collection with my keyboard, without returning to the Spotify application while listening.\nAs Spotify itself doesn\u0026rsquo;t provide this functionality, I tried to find a solution.. but, I didn\u0026rsquo;t find a solution that matched my requirements so I attempted to come up with my own.\nThe reason I found this annoying is because returning to the Spotify application interrupted my workflow, and I didn\u0026rsquo;t want to miss that cool song too ¬Ø\\_(„ÉÑ)_/¬Ø\nThis might come in handy if you\u0026rsquo;re a gamer and loves music.\nHow2Use The application is pretty straight forward. All you gotta do is type out your hotkey with + as the separator.\nAfter installation when you first start the app after authorizing your account, it would look like:\nThe application is now in a state of fetching all of your private playlists. Once that is done, you will be able to see all of your playlists when you click the drop down.\nPlease note that it might take some time for the application to start the first time you open it. It attempts to download all the icons of your playlists. Well, this depends mostly on your interent connection.\r\rAlso keep in mind to not close the application when it\u0026rsquo;s fetching. This is a bug that I didn\u0026rsquo;t fix (sorry) It\u0026rsquo;s fixed!\r\rConfiguring the hotkeys And now, all you have to do is type out your hotkey using \u0026ldquo;+\u0026rdquo; as the separator.\nFor instance, if you want to like your current playing song when you press ctrl and l together, the value would be ctrl+l selecting Saved Songs in the drop down.\nHere\u0026rsquo;s what I use to save a song to my playlist named Chill:\nClosing the application would automatically save it to the System Tray. Wanna get it back again or close it? Right click the tray icon and you\u0026rsquo;ll see a list of options.\r\rSettings The settings page consists of 4 options, namely:\n Fetch All your playlists Fetch Songs on startup Show notifications Auto Like With playlists     Setting Description     Fetch All your playlists This option is enabled by default. Fetches all your private playlists from the API. If you don\u0026rsquo;t wish to enable hotkeys for playlists and just your Liked songs library, consider disabling this setting. (Faster startup: if disabled)   Fetch Songs on startup This option would fetch the first 100 tracks from each of your private playlists. This would allow the application to prevent creating duplicate saves for a track in the same playlist. Due to a Spotify limitation, if you save a song in a playlist that has that specific song, there would be a duplicate. (Faster startup: if disabled)   Show notifications Allow or disable notifications, when you do a hotkey.   Auto Like With playlists Save the song to your liked songs library when you save to a playlist, automatically. If you saved the song to x playlist and you want the song to automatically get saved to your library Liked songs library too, consider enabling this option.    Startup\nWhen you install the application, the app would automatically register itself as a start up application. This means it would open itself when you log in to Windows.\nDon\u0026rsquo;t like startup apps? You can disable it by opening Task Manager: navigate to the startup tab, find SpotiLike, right click and disable.\nAvailable Keys The hotkeys can be literally anything you want. Even a+b works.\nBelow given are a list of keys that are available so far.\nalt\rbackspace\rcaps_lock\rctrl cmd delete down end enter esc f1 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19 f2\rf20\rf3\rf4\rf5\rf6\rf7\rf8\rf9\rhome\rinsert\rleft\rmedia_next\rmedia_play_pause\rmedia_previous\rmedia_volume_down\rmedia_volume_mute\rmedia_volume_up\rmenu\rnum_lock\rpage_down\rpage_up\rpause\rprint_screen\rright\rscroll_lock\rshift\rspace\rtab\rup\r+ the alphabet.\rI can\u0026rsquo;t find media_next keys in my keyboard..help! Those keys have special functions. Most keyboards have the functionality to skip the current playing song using a function key. F5 and F6 in most keyboards act as them. Even some headphones have this functionality too. You can specify these too so you can maybe save songs using your headset? Iunno.\nTo avoid possible errors, when you enter a key as a hotkey the application goes through a matching process to match to the nearest existing key. For instance, if you type ct+l the application would error internally as a key called \u0026lsquo;ct\u0026rsquo; doesn\u0026rsquo;t exist. The closest match would be ctrl so the application would take it as ctrl+l internally.TL;DR: ct+l works as ctrl+l.\r\r","link":"https://yeti-is-god.ml/docs/spotilike_/v2/spotilike/","title":"SpotiLike"},{"body":"Hi! This is my first attempt in creating \u0026ldquo;an app that would let you save Spotify songs using your keyboard with a custom keyboard shortcut.\u0026rdquo;\nIt\u0026rsquo;ll be great if you use version 2 since this is boring :/\nSpotiLike v1 I\u0026rsquo;ll be going through how to use this only, why and what can be learned if you head over here.\nConfiguration After installation, the app would auto minimize itself to the System Tray. You can then access the config.ini file by:\n right-clicking the icon in the system tray clicking on config  This would open up a file in your prefered text editor, most likely Notepad.\nIf the app fails to open the file, or even if you did open it, fails to save the file: you\u0026rsquo;re running into a permissions error. Re-run the app in adminstrator mode or just move the app location to somewhere like your Documents library to fix this.\r\rKey-values When you first open the file it would look like this:\n[Liked Songs] key=ctrl+l auto_like_for_playlist=yes # Good luck! Each entry inside a [] block would count as a playlist.\nAfter you define your playlist inside [] put two values below it namely,\n key - hotkey playlist - playlist url  Have a look at this example:\n[Liked Songs] key=ctrl+l auto_like_for_playlist=yes [My really awesome playlist] key=alt+1 playlist=https://open.spotify.com/playlist/586XcIMqh10SsxAT3GBm6j [Second cool playlist] key=alt+2 playlist=https://open.spotify.com/playlist/1923kljlkadsnlcasdlad [Wait another PLaylist?] key=ctrl+shift+f playlist=https://open.spotify.com/playlist/01HZ3A9NxKJNcKg6BPNOR6 When you save the config file, the app would auto reload itself.\nAll you gotta do is press the hotkeys now and it\u0026rsquo;s gonna show a notification to notify you that the song succesfully saved.\nNOTE: The auto_like_for_playlist is \u0026ldquo;yes\u0026rdquo; by default. You can change it to \u0026ldquo;no\u0026rdquo; if you don\u0026rsquo;t want songs auto added to your liked songs library when adding a song to a playlist.\r\rThe playlist name you write inside [] would be shown in the notification when saving despite the actual playlist name.\r\rIcons üåà Yes\nThe default icon is a super ugly ‚Ñπ icon :/ You can have a custom icon per playlist you create in your config.ini.\nNOTE: You should have your image as a .ico file. You can find plenty of sites online that converts your image file to a .ico for you.\r\rIn the Tray menu, go ahead and click the Icons üåà option. This will open a folder which by default contains 3 icon files.\n Grab your .ico file and copy it to the folder. Rename it to the name you defined your playlist in the config file. (Example; if you did My Awesome Playlist the .ico file name should be My Awesome Playlist too.)  You can also replace the default 3 icons with whatever you like. Just make sure they\u0026rsquo;re there and you don\u0026rsquo;t accidentally delete them since they\u0026rsquo;re required. They should be .ico files too!\r\rStartup Wait, can I make this open on startup somehow?\nYes. Follow these steps below:\n Hold windows key + R In the Run dialog that appears, type shell:startup. Paste the SpotiLike shortcut in the folder that appears.  Congratulations you made it to the end. Say Hi? Add me on Discord! Yeti#4594\nThis project was mostly based on my personal need. It probably might be useless for alot of people, but if you find it useful however feel free to install it and send me a virtual hug.\nThanks.\n","link":"https://yeti-is-god.ml/docs/spotilike_/v1/spotilikev1/","title":"SpotiLike v1"}]